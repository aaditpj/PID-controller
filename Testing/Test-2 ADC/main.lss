
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000037  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000ad  00000000  00000000  0000020b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000063  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000129  00000000  00000000  0000031b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c3  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ReadADC>:
 #include <avr/interrupt.h>
 
 uint16_t ReadADC(void)
{
   //Start Single conversion
   ADCSRA|=(1<<ADSC);
  80:	80 91 7a 00 	lds	r24, 0x007A
  84:	80 64       	ori	r24, 0x40	; 64
  86:	80 93 7a 00 	sts	0x007A, r24

   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
  8a:	80 91 7a 00 	lds	r24, 0x007A
  8e:	84 ff       	sbrs	r24, 4
  90:	fc cf       	rjmp	.-8      	; 0x8a <ReadADC+0xa>
   //Clear ADIF by writing one to it
   //Note you may be wondering why we have write one to clear it
   //This is standard way of clearing bits in io as said in datasheets.
   //The code writes '1' but it result in setting bit to '0' !!!

   ADCSRA|=(1<<ADIF);
  92:	80 91 7a 00 	lds	r24, 0x007A
  96:	80 61       	ori	r24, 0x10	; 16
  98:	80 93 7a 00 	sts	0x007A, r24

   return(ADC);
  9c:	20 91 78 00 	lds	r18, 0x0078
  a0:	30 91 79 00 	lds	r19, 0x0079
}
  a4:	c9 01       	movw	r24, r18
  a6:	08 95       	ret

000000a8 <main>:
 
 int main(void){
	ADMUX |= (1<<REFS0);
  a8:	80 91 7c 00 	lds	r24, 0x007C
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); 
  b2:	80 91 7a 00 	lds	r24, 0x007A
  b6:	87 68       	ori	r24, 0x87	; 135
  b8:	80 93 7a 00 	sts	0x007A, r24
	
	DDRB |= (1 << DDB1)|(1 << DDB2)|(1<<PINB3);
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	8e 60       	ori	r24, 0x0E	; 14
  c0:	84 b9       	out	0x04, r24	; 4
    // PB1 and PB2 is now an output

    OCR1A = 0;
  c2:	10 92 89 00 	sts	0x0089, r1
  c6:	10 92 88 00 	sts	0x0088, r1
    // set PWM for 25% duty cycle @ 8bit

    OCR1B = 125;
  ca:	8d e7       	ldi	r24, 0x7D	; 125
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	90 93 8b 00 	sts	0x008B, r25
  d2:	80 93 8a 00 	sts	0x008A, r24
    // set PWM for 75% duty cycle @ 8bit

    TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
  d6:	80 91 80 00 	lds	r24, 0x0080
  da:	80 6a       	ori	r24, 0xA0	; 160
  dc:	80 93 80 00 	sts	0x0080, r24
    // set none-inverting mode

    TCCR1A |= (1 << WGM10)|(1<<WGM11);
  e0:	80 91 80 00 	lds	r24, 0x0080
  e4:	83 60       	ori	r24, 0x03	; 3
  e6:	80 93 80 00 	sts	0x0080, r24
    TCCR1B |= (1 << WGM12);
  ea:	80 91 81 00 	lds	r24, 0x0081
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 93 81 00 	sts	0x0081, r24
    // set Fast PWM mode using ICR1 as TOP
	TIMSK1 |= (1 << OCIE1A);
  f4:	80 91 6f 00 	lds	r24, 0x006F
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 93 6f 00 	sts	0x006F, r24
	sei();
  fe:	78 94       	sei
    TCCR1B |= (1 << CS10);
 100:	80 91 81 00 	lds	r24, 0x0081
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 93 81 00 	sts	0x0081, r24
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x62>

0000010c <__vector_11>:
		
	}
	
}

ISR(TIMER1_COMPA_vect){
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31

	OCR1A= ReadADC();
 12e:	0e 94 40 00 	call	0x80	; 0x80 <ReadADC>
 132:	90 93 89 00 	sts	0x0089, r25
 136:	80 93 88 00 	sts	0x0088, r24
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
