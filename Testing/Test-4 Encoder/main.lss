
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000001b8  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004c  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000da  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000aa  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000123  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d7  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile int32_t encoderValue;

void encoder_Init(void);

int main(void){
	DDRB |= (1 << DDB1);
  90:	21 9a       	sbi	0x04, 1	; 4
    // set Fast PWM mode using ICR1 as TOP
	TIMSK1 |= (1 << OCIE1A);
	sei();
    TCCR1B |= (1 << CS10);
    // START the timer with no prescaler*/
	DDRB = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 b9       	out	0x04, r24	; 4
}
}


void encoder_Init(void){
	EIMSK |= (1<<INT0); // enabling external interrupt 0;
  96:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01)|(1<<ISC00); //Interrupt set on rising edge
  98:	90 91 69 00 	lds	r25, 0x0069
  9c:	93 60       	ori	r25, 0x03	; 3
  9e:	90 93 69 00 	sts	0x0069, r25
	encoderValue = 0;
  a2:	10 92 00 01 	sts	0x0100, r1
  a6:	10 92 01 01 	sts	0x0101, r1
  aa:	10 92 02 01 	sts	0x0102, r1
  ae:	10 92 03 01 	sts	0x0103, r1
	sei();
    TCCR1B |= (1 << CS10);
    // START the timer with no prescaler*/
	DDRB = 0xff;
	encoder_Init();
	PORTD = 0xff;
  b2:	8b b9       	out	0x0b, r24	; 11
	sei(); //enabling global interrupts
  b4:	78 94       	sei
	PORTB=0xff;
  b6:	85 b9       	out	0x05, r24	; 5
	
	while(1){
	if(encoderValue<=20)
  b8:	80 91 00 01 	lds	r24, 0x0100
  bc:	90 91 01 01 	lds	r25, 0x0101
  c0:	a0 91 02 01 	lds	r26, 0x0102
  c4:	b0 91 03 01 	lds	r27, 0x0103
  c8:	45 97       	sbiw	r24, 0x15	; 21
  ca:	a1 05       	cpc	r26, r1
  cc:	b1 05       	cpc	r27, r1
  ce:	14 f4       	brge	.+4      	; 0xd4 <main+0x44>
	{
	PORTB |= 1<<PINB1; // for testing only
  d0:	29 9a       	sbi	0x05, 1	; 5
  d2:	f2 cf       	rjmp	.-28     	; 0xb8 <main+0x28>
	}
	else
	PORTB = 0x00;
  d4:	15 b8       	out	0x05, r1	; 5
  d6:	f0 cf       	rjmp	.-32     	; 0xb8 <main+0x28>

000000d8 <encoder_Init>:
}
}


void encoder_Init(void){
	EIMSK |= (1<<INT0); // enabling external interrupt 0;
  d8:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01)|(1<<ISC00); //Interrupt set on rising edge
  da:	e9 e6       	ldi	r30, 0x69	; 105
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	83 60       	ori	r24, 0x03	; 3
  e2:	80 83       	st	Z, r24
	encoderValue = 0;
  e4:	10 92 00 01 	sts	0x0100, r1
  e8:	10 92 01 01 	sts	0x0101, r1
  ec:	10 92 02 01 	sts	0x0102, r1
  f0:	10 92 03 01 	sts	0x0103, r1
}
  f4:	08 95       	ret

000000f6 <__vector_1>:

//interrupt service routine
ISR(INT0_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
	encoderValue++; //encrement encoder value on every pulse
 108:	80 91 00 01 	lds	r24, 0x0100
 10c:	90 91 01 01 	lds	r25, 0x0101
 110:	a0 91 02 01 	lds	r26, 0x0102
 114:	b0 91 03 01 	lds	r27, 0x0103
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	a1 1d       	adc	r26, r1
 11c:	b1 1d       	adc	r27, r1
 11e:	80 93 00 01 	sts	0x0100, r24
 122:	90 93 01 01 	sts	0x0101, r25
 126:	a0 93 02 01 	sts	0x0102, r26
 12a:	b0 93 03 01 	sts	0x0103, r27
	
	
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
