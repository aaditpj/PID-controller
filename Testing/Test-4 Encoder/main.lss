
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  0000026e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000063  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000110  00000000  00000000  000002f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000bb  00000000  00000000  00000401  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019b  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e9  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_1>
   8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile int8_t dir;

void encoder_Init(void);

int main(void){
	DDRB |= (1 << DDB1);
  90:	21 9a       	sbi	0x04, 1	; 4
    // PB1 and PB2 is now an output
	DDRB = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 b9       	out	0x04, r24	; 4
}
}


void encoder_Init(void){
	EIMSK |= (1<<INT0)|(1<<INT1); // enabling external interrupt 0
  96:	8d b3       	in	r24, 0x1d	; 29
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC10)|(1<<ISC00); //Interrupt set on logic change
  9c:	80 91 69 00 	lds	r24, 0x0069
  a0:	85 60       	ori	r24, 0x05	; 5
  a2:	80 93 69 00 	sts	0x0069, r24
	encoderValue = 0;
  a6:	10 92 01 01 	sts	0x0101, r1
  aa:	10 92 02 01 	sts	0x0102, r1
  ae:	10 92 03 01 	sts	0x0103, r1
  b2:	10 92 04 01 	sts	0x0104, r1
int main(void){
	DDRB |= (1 << DDB1);
    // PB1 and PB2 is now an output
	DDRB = 0xff;
	encoder_Init();
	PORTD = 0x00;
  b6:	1b b8       	out	0x0b, r1	; 11
	sei(); //enabling global interrupts
  b8:	78 94       	sei
	PORTB=0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	85 b9       	out	0x05, r24	; 5
	
	while(1){
	if(encoderValue>=1440)
  be:	80 91 01 01 	lds	r24, 0x0101
  c2:	90 91 02 01 	lds	r25, 0x0102
  c6:	a0 91 03 01 	lds	r26, 0x0103
  ca:	b0 91 04 01 	lds	r27, 0x0104
  ce:	80 5a       	subi	r24, 0xA0	; 160
  d0:	95 40       	sbci	r25, 0x05	; 5
  d2:	a0 40       	sbci	r26, 0x00	; 0
  d4:	b0 40       	sbci	r27, 0x00	; 0
  d6:	14 f0       	brlt	.+4      	; 0xdc <main+0x4c>
	{
	PORTB |= 1<<PINB1;                    // for testing only
  d8:	29 9a       	sbi	0x05, 1	; 5
  da:	f1 cf       	rjmp	.-30     	; 0xbe <main+0x2e>
	}
	else
	PORTB &= ~(1<<PINB1);
  dc:	29 98       	cbi	0x05, 1	; 5
  de:	ef cf       	rjmp	.-34     	; 0xbe <main+0x2e>

000000e0 <encoder_Init>:
}
}


void encoder_Init(void){
	EIMSK |= (1<<INT0)|(1<<INT1); // enabling external interrupt 0
  e0:	8d b3       	in	r24, 0x1d	; 29
  e2:	83 60       	ori	r24, 0x03	; 3
  e4:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC10)|(1<<ISC00); //Interrupt set on logic change
  e6:	e9 e6       	ldi	r30, 0x69	; 105
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	85 60       	ori	r24, 0x05	; 5
  ee:	80 83       	st	Z, r24
	encoderValue = 0;
  f0:	10 92 01 01 	sts	0x0101, r1
  f4:	10 92 02 01 	sts	0x0102, r1
  f8:	10 92 03 01 	sts	0x0103, r1
  fc:	10 92 04 01 	sts	0x0104, r1
}
 100:	08 95       	ret

00000102 <__vector_1>:

//interrupt service routine for quadrature encoding

ISR(INT0_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
	if (bit_is_set(PIND,3))
 114:	4b 9b       	sbis	0x09, 3	; 9
 116:	03 c0       	rjmp	.+6      	; 0x11e <__vector_1+0x1c>
    {
        if (bit_is_set(PIND,2))
 118:	4a 9b       	sbis	0x09, 2	; 9
 11a:	03 c0       	rjmp	.+6      	; 0x122 <__vector_1+0x20>
 11c:	10 c0       	rjmp	.+32     	; 0x13e <__vector_1+0x3c>
            encoderValue--;
        }
    }
    else
    {
        if (bit_is_set(PIND,2) )
 11e:	4a 9b       	sbis	0x09, 2	; 9
 120:	0e c0       	rjmp	.+28     	; 0x13e <__vector_1+0x3c>
        {
            dir=0;
 122:	10 92 00 01 	sts	0x0100, r1
            encoderValue--;
 126:	80 91 01 01 	lds	r24, 0x0101
 12a:	90 91 02 01 	lds	r25, 0x0102
 12e:	a0 91 03 01 	lds	r26, 0x0103
 132:	b0 91 04 01 	lds	r27, 0x0104
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	a1 09       	sbc	r26, r1
 13a:	b1 09       	sbc	r27, r1
 13c:	0e c0       	rjmp	.+28     	; 0x15a <__vector_1+0x58>
        }
        else
        {
            dir=1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 00 01 	sts	0x0100, r24
            encoderValue++;
 144:	80 91 01 01 	lds	r24, 0x0101
 148:	90 91 02 01 	lds	r25, 0x0102
 14c:	a0 91 03 01 	lds	r26, 0x0103
 150:	b0 91 04 01 	lds	r27, 0x0104
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	a1 1d       	adc	r26, r1
 158:	b1 1d       	adc	r27, r1
 15a:	80 93 01 01 	sts	0x0101, r24
 15e:	90 93 02 01 	sts	0x0102, r25
 162:	a0 93 03 01 	sts	0x0103, r26
 166:	b0 93 04 01 	sts	0x0104, r27
        }
    }
}	
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_2>:
	

ISR(INT1_vect){
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27

	if (bit_is_set(PIND,3))
 18e:	4b 9b       	sbis	0x09, 3	; 9
 190:	03 c0       	rjmp	.+6      	; 0x198 <__vector_2+0x1c>
    {
        if (bit_is_set(PIND,2))
 192:	4a 9b       	sbis	0x09, 2	; 9
 194:	03 c0       	rjmp	.+6      	; 0x19c <__vector_2+0x20>
 196:	11 c0       	rjmp	.+34     	; 0x1ba <__vector_2+0x3e>
            encoderValue++;
        }
    }
    else
    {
        if (bit_is_set(PIND,2))
 198:	4a 9b       	sbis	0x09, 2	; 9
 19a:	0f c0       	rjmp	.+30     	; 0x1ba <__vector_2+0x3e>
        {
            dir=1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 00 01 	sts	0x0100, r24
            encoderValue++;
 1a2:	80 91 01 01 	lds	r24, 0x0101
 1a6:	90 91 02 01 	lds	r25, 0x0102
 1aa:	a0 91 03 01 	lds	r26, 0x0103
 1ae:	b0 91 04 01 	lds	r27, 0x0104
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	a1 1d       	adc	r26, r1
 1b6:	b1 1d       	adc	r27, r1
 1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <__vector_2+0x58>
        }
        else
        {
            dir=0;
 1ba:	10 92 00 01 	sts	0x0100, r1
            encoderValue--;
 1be:	80 91 01 01 	lds	r24, 0x0101
 1c2:	90 91 02 01 	lds	r25, 0x0102
 1c6:	a0 91 03 01 	lds	r26, 0x0103
 1ca:	b0 91 04 01 	lds	r27, 0x0104
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	a1 09       	sbc	r26, r1
 1d2:	b1 09       	sbc	r27, r1
 1d4:	80 93 01 01 	sts	0x0101, r24
 1d8:	90 93 02 01 	sts	0x0102, r25
 1dc:	a0 93 03 01 	sts	0x0103, r26
 1e0:	b0 93 04 01 	sts	0x0104, r27
        }
    }
	
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
