
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  0000019a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000039  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000127  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c3  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000176  00000000  00000000  000003dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f4  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int dutycycle=0;

int main(void)
{
    DDRB |= (1 << DDB1)|(1 << DDB2)|(1<<PINB3);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8e 60       	ori	r24, 0x0E	; 14
  94:	84 b9       	out	0x04, r24	; 4
    // PB1 and PB2 is now an output

    OCR1A = 100;
  96:	84 e6       	ldi	r24, 0x64	; 100
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	90 93 89 00 	sts	0x0089, r25
  9e:	80 93 88 00 	sts	0x0088, r24
    // set PWM for 25% duty cycle @ 8bit

    OCR1B = 125;
  a2:	8d e7       	ldi	r24, 0x7D	; 125
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	90 93 8b 00 	sts	0x008B, r25
  aa:	80 93 8a 00 	sts	0x008A, r24
    // set PWM for 75% duty cycle @ 8bit

    TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
  ae:	80 91 80 00 	lds	r24, 0x0080
  b2:	80 6a       	ori	r24, 0xA0	; 160
  b4:	80 93 80 00 	sts	0x0080, r24
    // set none-inverting mode

    TCCR1A |= (1 << WGM10)|(1<<WGM11);
  b8:	80 91 80 00 	lds	r24, 0x0080
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	80 93 80 00 	sts	0x0080, r24
    TCCR1B |= (1 << WGM12);
  c2:	80 91 81 00 	lds	r24, 0x0081
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 93 81 00 	sts	0x0081, r24
    // set Fast PWM mode using ICR1 as TOP
	TIMSK1 |= (1 << OCIE1A);
  cc:	80 91 6f 00 	lds	r24, 0x006F
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 93 6f 00 	sts	0x006F, r24
	sei();
  d6:	78 94       	sei
    TCCR1B |= (1 << CS10);
  d8:	80 91 81 00 	lds	r24, 0x0081
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	80 93 81 00 	sts	0x0081, r24
  e2:	80 91 00 01 	lds	r24, 0x0100
  e6:	90 91 01 01 	lds	r25, 0x0101
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	20 e2       	ldi	r18, 0x20	; 32
  ec:	3e e4       	ldi	r19, 0x4E	; 78

    

    while (1)
    {
	  dutycycle+=10;
  ee:	0a 96       	adiw	r24, 0x0a	; 10
	  if(dutycycle>=1020)
  f0:	43 e0       	ldi	r20, 0x03	; 3
  f2:	8c 3f       	cpi	r24, 0xFC	; 252
  f4:	94 07       	cpc	r25, r20
  f6:	14 f0       	brlt	.+4      	; 0xfc <main+0x6c>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
		dutycycle=0;
	
	for(int i=0; i<10000; i++);
	PORTB |= (1<<PINB3);
  fc:	2b 9a       	sbi	0x05, 3	; 5
		
	  OCR1A=dutycycle;	
  fe:	90 93 89 00 	sts	0x0089, r25
 102:	80 93 88 00 	sts	0x0088, r24
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x78>
 10c:	f0 cf       	rjmp	.-32     	; 0xee <main+0x5e>

0000010e <__vector_11>:
	_delay_ms(10);
    }
}

ISR(TIMER1_COMPA_vect)
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
  
}
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
